name: 'publish'

on:
  push:
    branches:
      - release

# 该工作流将在每次推送到 `release` 分支时触发，创建或更新 GitHub Release，构建应用程序并将工件上传到 Release。

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            python-version: '3.9'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            python-version: '3.9'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
            python-version: '3.9'
          - platform: 'windows-latest'
            args: ''
            python-version: '3.9'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # 这些目标仅在 macOS 上使用，因此通过条件加快 windows 和 linux 构建速度。
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf python3-dev
        # 安装 Python 开发库，确保头文件和库可用。

      - name: Install pnpm
        run: npm install -g pnpm

      # 安装 LLVM
      - name: Install LLVM on Ubuntu
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm

      - name: Install LLVM on macOS
        if: matrix.platform == 'macos-latest'
        run: |
          brew install llvm
          export PATH="/usr/local/opt/llvm/bin:$PATH"

      - name: Install LLVM on Windows
        if: matrix.platform == 'windows-latest'
        run: |
          choco install llvm

      # 安装 Python 环境
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # 设置 PYO3_PYTHON 环境变量以确保正确的 Python 解释器路径
      - name: Set PYO3_PYTHON env
        run: echo "PYO3_PYTHON=$(which python)" >> $GITHUB_ENV

      # 安装前端依赖
      - name: install frontend dependencies
        run: pnpm install --frozen-lockfile || pnpm install

      # 使用 Tauri 构建应用程序
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__  # 动作自动将 __VERSION__ 替换为应用版本。
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
