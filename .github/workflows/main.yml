name: 'publish'

on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install pnpm
        run: npm install -g pnpm

      # 安装 LLVM
      - name: Install LLVM on Ubuntu
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm

      - name: Install LLVM on macOS
        if: matrix.platform == 'macos-latest'
        run: |
          brew install llvm
          echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> ~/.bash_profile
          source ~/.bash_profile

      - name: Install LLVM on Windows
        if: matrix.platform == 'windows-latest'
        run: |
          choco install llvm

      # 安装 pyenv
      - name: Install pyenv
        if: matrix.platform == 'macos-latest' || matrix.platform == 'ubuntu-22.04'
        run: |
          curl https://pyenv.run | bash
          echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> $GITHUB_ENV
          echo 'eval "$(pyenv init --path)"' >> $GITHUB_ENV
          echo 'eval "$(pyenv init -)"' >> $GITHUB_ENV
          echo 'eval "$(pyenv virtualenv-init -)"' >> $GITHUB_ENV
          source ~/.bashrc

      # 使用 pyenv 安装 Python 3.12
      - name: Install Python using pyenv
        if: matrix.platform == 'macos-latest' || matrix.platform == 'ubuntu-22.04'
        run: |
          pyenv install 3.12.0
          pyenv global 3.12.0
          python -m pip install --upgrade pip

      # 安装 Python 环境（Windows 平台使用 setup-python）
      - name: Setup Python
        if: matrix.platform == 'windows-latest'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # 安装前端依赖
      - name: install frontend dependencies
        run: pnpm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__  # 动作自动将 __VERSION__ 替换为应用版本
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
